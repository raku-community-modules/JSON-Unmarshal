=begin pod

=head1 NAME

JSON::Unmarshal - turn JSON into an Object (the opposite of JSON::Marshal)

=head1 SYNOPSIS

=begin code

use JSON::Unmarshal;

class SomeClass {
    has Str $.string;
    has Int $.int;
}

my $json = '{ "string" : "string", "int" : 42 }';

my SomeClass $object = unmarshal($json, SomeClass);

say $object.string; # -> "string"
say $object.int;    # -> 42

=end code

=head1 DESCRIPTION

This provides a single exported subroutine to create an object from a
JSON representation of an object.

It only initialises the "public" attributes (that is those with accessors
created by declaring them with the '.' twigil. Attributes without
acccessors are ignored.

=head2 C<unmarshal> Routine

C<unmarshal> has the following signatures:

=item C<unmarshal(Str:D $json, Positional $obj, *%)>
=item C<unmarshal(Str:D $json, Associative $obj, *%)>
=item C<unmarshal(Str:D $json, Mu $obj, *%)>
=item C<unmarshal(%json, $obj, *%)>
=item C<unmarshal(@json, $obj, *%)>

The signatures with associative and positional JSON objects are to be
used for pre-parsed JSON data obtained from a different source. For
example, this may happen when a framework deserializes it for you.

The following named arguments are supported:

=begin item
B<C<Bool :$opt-in>>

When falsy then all attributes of a class are deserialized. When
I<True> then only those marked with C<is json> trait provided by
C<JSON::OptIn> module are taken into account.
=end item

=begin item
B<C<Bool :$warn>>

If set to I<True> then the module will warn about some non-critical
problems like unsupported named arguments or keys in JSON structure
for which there no match attributes were found.
=end item

=begin item
B<C<Bool :$die>> or B<C<Bool :$throw>>

This is two aliases of the same attribute with meaning, similar to
C<:warn>, but where otherwise a waning would be issued the module
will throw an exception.
=end item

=head2 Manual Unmarshalling

It is also possible to use C<is unmarshalled-by> trait to control
how the value is unmarshalled:

=begin code :lang<raku>

use JSON::Unmarshal

class SomeClass {
    has Version $.version is unmarshalled-by(-> $v { Version.new($v) });
}

my $json = '{ "version" : "0.0.1" }';

my SomeClass $object = unmarshal($json, SomeClass);

say $object.version; # -> "v0.0.1"

=end code

The trait has two variants, one which takes a C<Routine> as above,
the other a C<Str> representing the name of a method that will be
called on the type object of the attribute type (such as "new"),
both are expected to take the value from the JSON as a single
argument.

=head1 COPYRIGHT AND LICENSE

Copyright 2015 - 2017 Tadeusz So≈õnierz

Copyright 2022 - 2025 Raku Community

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4 ft=raku
